class Node:
    def __init__(self):
        self.leaf = 0
        self.edges = [None for i in range(26)]

class Trie:

    def __init__(self):
        self.root = Node()

    def insert(self, word: str) -> None:
        def recurse(curr: Node, index: int) -> None:
            if index >= len(word):
                curr.leaf = 1
            else:
                getNum = ord(word[index]) - 97
                if (curr.edges[getNum] is None):
                    newNode = Node()
                    curr.edges[getNum] = newNode
                return recurse(curr.edges[getNum], index+1)
                
        return recurse(self.root, 0)
    
    def search(self, word: str) -> bool:
        def findit(curr: Node, index: int) -> bool:
            if (curr is None):
                return False
            elif (index >= len(word)):
                return curr.leaf == 1
            else:
                num = ord(word[index]) - 97
                return findit(curr.edges[num],index+1)
            
        return findit(self.root,0)          
            
    def startsWith(self, prefix: str) -> bool:
        def findit(curr: Node, index: int) -> bool:
            if (curr is None):
                return False
            elif (index >= len(prefix)):
                return True
            else:
                num = ord(prefix[index]) - 97
                return findit(curr.edges[num],index+1)
            
        return findit(self.root,0) 


# Your Trie object will be instantiated and called as such:
# obj = Trie()
# obj.insert(word)
# param_2 = obj.search(word)
# param_3 = obj.startsWith(prefix)
