# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def isValidBST(self, root: Optional[TreeNode]) -> bool:
        self.answer = True
        def isValidHelper(root: Optional[TreeNode]):
            if (self.answer is False):
                return 0,0
            leftMax = leftMin = rightMax = rightMin = root.val
            if (root.left is None and root.right is None):
                return root.val, root.val
            if (root.left is not None):
                leftMin, leftMax = isValidHelper(root.left)
                if (root.val <= leftMax):
                    self.answer = False
            if (root.right is not None):
                rightMin, rightMax = isValidHelper(root.right)
                if (root.val >= rightMin):
                    self.answer = False
                    
            return leftMin,rightMax
            
        if (root is None):
            return True
        isValidHelper(root)
        return self.answer
