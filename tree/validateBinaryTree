class Solution:
    def validateBinaryTreeNodes(self, n: int, leftChild: List[int], rightChild: List[int]) -> bool:
        #find root
        visited = [-1 for i in range(n)]
        for i in range(n):
            if leftChild[i] != -1:
                visited[leftChild[i]] = 0
            
            if rightChild[i] != -1:
                visited[rightChild[i]] = 0
        
        root = -1
        for i in range(n):
            if (visited[i] == -1):
                if (root == -1):
                    root = i
                else:
                    return False
            visited[i] = -1
        #dfs
        stack = []
        stack.append(root)
        while len(stack) > 0:
           # print(stack)
            top = stack.pop()
            if (visited[top] != -1):
                return False
            visited[top] = 0
            if leftChild[top] != -1:
                stack.append(leftChild[top])
            if rightChild[top] != -1:
                stack.append(rightChild[top])
        
        for i in range(n):
            if (visited[i] == -1):
                return False
        return True
            
                
            
        
