# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def isSubPath(self, head: Optional[ListNode], root: Optional[TreeNode]) -> bool:
        stack = []
        stack.append(root)
        answer = False
        while(len(stack) is not 0):
            topper = stack.pop()
            if topper.left is not None:
                stack.append(topper.left)
            if topper.right is not None:
                stack.append(topper.right)
            if (topper.val == head.val):
                answer = answer or self.search(head,topper)
            if answer:
                return True
        return answer
    
    def search(self, head: Optional[ListNode], root: Optional[TreeNode]) -> bool:
        if head is None:
            return True
        if root is None:
            return False
        else:
            if head.val == root.val:
                return self.search(head.next, root.left) or self.search(head.next, root.right)
            else:
                return False
        
