# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def reverseKGroup(self, head: Optional[ListNode], k: int) -> Optional[ListNode]:
        if k == 1:
            return head
        lastNode = None
        start = head
        answer = head
        while True:
            count = 0
            curr = start
            while (count < k) and curr is not None:
                count += 1
                curr = curr.next
            if (count < k):
                lastNode.next = start
                break
            else:
                curr = start
                prev = curr
                curr = curr.next
                count = 1
                while (count < k):
                    count += 1
                    temp = curr.next
                    curr.next = prev
                    prev = curr
                    curr = temp
                
                temp = start
                start = curr
                if lastNode is not None:
                    lastNode.next = prev
                else:
                    answer = prev 
                lastNode = temp
                if start is None:
                    lastNode.next = None
                    break;
        return answer
                
                    
                    
                
