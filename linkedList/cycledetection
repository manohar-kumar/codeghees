# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def detectCycle(self, head: ListNode) -> ListNode:
        if head is None:
            return head
        singlePointer = head
        doublePointer = head
        while True:
            if (doublePointer is None or doublePointer.next is None):
                return None
            singlePointer = singlePointer.next
            doublePointer = doublePointer.next.next
            if (singlePointer == doublePointer):
                break
        
        newPointer = head
        while newPointer is not singlePointer:
            newPointer = newPointer.next
            singlePointer = singlePointer.next
        return newPointer
