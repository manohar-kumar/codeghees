class Solution:
    def searchRange(self, nums: List[int], target: int) -> List[int]:
        if (len(nums) == 0):
            return [-1,-1]
        return self.searchHelper(nums,target,0,len(nums)-1);
    
    def searchHelper(self, nums: List[int], target: int, i:int, j:int)-> List[int]:
        mid = (j+i+1)//2
        if (i==j):
            if (nums[i] == target):
                return [i,j]
            else:
                return [-1,-1]
        elif (nums[mid] < target):
            return self.searchHelper(nums, target,mid, j)
        elif (nums[mid] > target):
            return self.searchHelper(nums,target,i,mid-1)
        else:
            larr = self.findLeft(nums,target,i,mid-1)
            rarr = self.findRight(nums,target,mid,j)
            if (larr != -1):
                return [larr, rarr]
            else:
                return[mid,rarr]
            
        
    def findLeft(self, nums: List[int], target: int, i:int, j:int)-> int:
        mid = (j+i)//2
        if (i==j):
            if (nums[i] == target):
                return i
            else:
                return -1
        elif (nums[mid] < target):
            return self.findLeft(nums, target,mid+1,j)
        elif (nums[mid] >= target):
            return self.findLeft(nums, target, i, mid)
        
    def findRight(self, nums: List[int], target: int, i:int, j:int) -> int:
        mid = (j+i+1)//2
        if (i==j):
            if (nums[i] == target):
                return i
            else:
                return -1
        elif (nums[mid] <= target):
            return self.findRight(nums, target,mid,j)
        elif (nums[mid] > target):
            return self.findRight(nums, target, i, mid-1)
            
        
        
        
