class Solution:
    def longestCommonSubsequence(self, text1: str, text2: str) -> int:
        m,n = len(text1),len(text2)
        dp = [[-1 for i in range(n)] for j in range(m)]
        return self.longHelper(text1,text2,dp,0,0)
    
    def longHelper(self, text1:str, text2: str, dp : List[List[int]], i:int, j:int) -> int:
        m,n = len(text1),len(text2)
        if i >= m or j>= n:
            return 0
        elif(dp[i][j] != -1):
            return dp[i][j]
        else:
            if (text1[i] == text2[j]):
                dp[i][j] = 1 + self.longHelper(text1, text2, dp, i+1, j+1)
            else:
                dp[i][j] = max(self.longHelper(text1,text2,dp,i+1,j),self.longHelper(text1,text2,dp,i,j+1))
        return dp[i][j]
