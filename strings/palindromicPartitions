class Solution:
    def partition(self, s: str) -> List[List[str]]:
        n = len(s)
        palindrome = [[0] * n for i in range(0,n)]
        for i in range(0,n):
            palindrome[i][i] = 1           
        for i in range(1,n):
            for j in range(0,n):
                if (j+i < n):
                    if (i == 1):
                        palindrome[j][j+i] = 1 if s[j] == s[j+i] else 0
                    else:
                        palindrome[j][j+i] = 1 if ((s[j] == s[j+i]) and palindrome[j+1][j+i-1]) else 0
        return self.partHelper(s, 0,n-1, palindrome)
                    
        
    def partHelper(self, s:str, i:int,j:int, palindrome: List[List[int]]) -> List[List[str]]:
        if (i > j):
            return [[]]
        if (i == j):
            return [[s[i:i+1]]]
        answer = []
        for starter in range(0,j-i+1):
            if (palindrome[i][i+starter]):
                soln = self.partHelper(s, i+starter+1, j, palindrome)
                for everylist in soln:
                    everylist.insert(0,s[i:i+starter+1])
                    answer.append(everylist)
        
        return answer
            
