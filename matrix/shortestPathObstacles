class Solution:
    def shortestPath(self, grid: List[List[int]], k: int) -> int:
        heap,m,n,visited = [], len(grid), len(grid[0]), {}
        heap.append((0,0,0,grid[0][0]))
        visited[(0,0)] = 0
        while (heap):
            val,r,c,obs = heap.pop(0)
            obs += grid[r][c]
            if (obs > k):
                continue
            if r == m-1 and c == n-1:
                return val
            for x,y in [(1,0),(-1,0),(0,1),(0,-1)]:
                if (r+x >= 0 and r+x<m and c+y >= 0 and c+y < n) and ((r+x,c+y) not in visited or visited[(r+x,c+y)] > obs):
                    heap.append((val+1,r+x,c+y,obs))
                    visited[(r+x,c+y)] = obs
        return -1
