# """
# This is the interface that allows for creating nested lists.
# You should not implement it, or speculate about its implementation
# """
#class NestedInteger:
#    def isInteger(self) -> bool:
#        """
#        @return True if this NestedInteger holds a single integer, rather than a nested list.
#        """
#
#    def getInteger(self) -> int:
#        """
#        @return the single integer that this NestedInteger holds, if it holds a single integer
#        Return None if this NestedInteger holds a nested list
#        """
#
#    def getList(self) -> [NestedInteger]:
#        """
#        @return the nested list that this NestedInteger holds, if it holds a nested list
#        Return None if this NestedInteger holds a single integer
#        """

class NestedIterator:
    def __init__(self, nestedList: [NestedInteger]):
        self.myList = []
        self.curr = 0
        for intOrList in nestedList:
            if intOrList.isInteger():
                self.myList.append(intOrList.getInteger())
            else:
                myqueue = []
                myqueue.append(intOrList)
                while (len(myqueue) > 0):
                    firstFromQueue = myqueue.pop(0)
                    if (firstFromQueue.isInteger()):
                        self.myList.append(firstFromQueue.getInteger())
                    else:
                        newList = firstFromQueue.getList()
                        i = 0
                        for iterate in newList:
                            myqueue.insert(i,iterate)
                            i+=1
                
    
    def next(self) -> int:
        answer = self.myList[self.curr]
        self.curr = self.curr + 1
        return answer
    
    def hasNext(self) -> bool:
         return self.curr < len(self.myList)

# Your NestedIterator object will be instantiated and called as such:
# i, v = NestedIterator(nestedList), []
# while i.hasNext(): v.append(i.next())
